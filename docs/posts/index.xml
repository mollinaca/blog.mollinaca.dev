<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on mollinaca:/dev/random</title>
    <link>https://blog.mollinaca.dev/posts/</link>
    <description>Recent content in Posts on mollinaca:/dev/random</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 16 Jul 2021 23:18:57 +0900</lastBuildDate><atom:link href="https://blog.mollinaca.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>new blog!</title>
      <link>https://blog.mollinaca.dev/posts/20210716/newblog/</link>
      <pubDate>Fri, 16 Jul 2021 23:18:57 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210716/newblog/</guid>
      <description>新しいブログサイト作った ちょっと前に作った blogger + StackEdit が気に食わなかったので新しく作ってみた。 Hugo でページを作成し、GitHubにデプロイし、GitHub Pagesで公開する。カスタムドメイン＋HTTPSも設定。 しばらくこれでやってみよう。 hugo の使い</description>
    </item>
    
    <item>
      <title>DFS と BFS の例題を解く</title>
      <link>https://blog.mollinaca.dev/posts/20210709/dfs_bfs2/</link>
      <pubDate>Fri, 09 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210709/dfs_bfs2/</guid>
      <description>A - 深さ優先探索 次の問題を解く。A - 深さ優先探索 実装 H,W = map(int,input().split()) grid = [list(input()) for i in range(H)] # スタート地点を探す found = False for y,line in enumerate(grid): for x,p in enumerate(line): if p == &amp;#34;s&amp;#34;: start = (y,x) found = True break if found: break from collections import deque q = deque() q.append(start) direction = [[-1,0],[1,0],[0,-1],[0,1]] while q: p = q.pop() # DFS y = p[0] x = p[1] for d in direction: ny = y + d[0] nx = x + d[1] if 0 &amp;lt;= ny &amp;lt; H and 0 &amp;lt;= nx &amp;lt;</description>
    </item>
    
    <item>
      <title>DFS と BFS</title>
      <link>https://blog.mollinaca.dev/posts/20210707/dfs_bfs/</link>
      <pubDate>Wed, 07 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210707/dfs_bfs/</guid>
      <description>グラフを取得できたら、深さ優先探索（DFS）と幅優先探索（BFS）を実装してみる。 問題1 入力するグラフは以下。よくあるやつ。 これをテキスト情報で入力にすると以下のようになる。 7 6 1 2 1 3 2 4 2 5 3 6 3 7 このグラフに対して、1から出発して7に</description>
    </item>
    
    <item>
      <title>python でのグラフの取得方法(2)</title>
      <link>https://blog.mollinaca.dev/posts/20210706/graph2/</link>
      <pubDate>Tue, 06 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210706/graph2/</guid>
      <description>隣接辞書 これは自分のオリジナル（？）。 オリジナル、というほどのアイデアでもないだろうけど、当初自分がグラフの問題を初めてみて、どうやってこの情報を管理したらいいんだろ？で最初に考えたやりかた。以下のようにグラフ情報をdictで取得する。 この</description>
    </item>
    
    <item>
      <title>python でのグラフの取得方法</title>
      <link>https://blog.mollinaca.dev/posts/20210705/graph/</link>
      <pubDate>Mon, 05 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210705/graph/</guid>
      <description>python でグラフの入力を受け取る 昨日のABC208のD問題が解けなかったのが悔しかったので、ちゃんとグラフ問題の解き方を勉強する。具体的には、 今雰囲気でやってるグラフ情報の取得と扱いをちゃんと学習する DFS/BFS の復習 最短経路問題等、典型問題とアルゴリズム</description>
    </item>
    
    <item>
      <title>WSL2 で Python &#43; Selenium &#43; ChromeDriver でスクレイピング</title>
      <link>https://blog.mollinaca.dev/posts/20210613/selenium/</link>
      <pubDate>Sun, 13 Jun 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210613/selenium/</guid>
      <description>準備 WSL2でpython3が利用できる状態 snap で chromium をインストール WSL2 で snapd を有効にする方法は以下を参考にした WSL2(Ubuntu 20.04)上でSnapdを動かす $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -yqq daemonize dbus-user-session fontconfig $ sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target $ exec sudo nsenter -t $(pidof systemd) -a su - $LOGNAME インストールされた chromium のバージョン確認</description>
    </item>
    
    <item>
      <title>python の3項演算子に関するメモ</title>
      <link>https://blog.mollinaca.dev/posts/20210606/python_memo/</link>
      <pubDate>Sun, 06 Jun 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210606/python_memo/</guid>
      <description>Python の3項演算子に関するメモ たまに使うけどこういうときどうすんだっけがわからなくて調べたのでメモしておく。 基本 if n == 1: print (&amp;#39;a&amp;#39;) else: print (&amp;#39;b&amp;#39;) は、 print (&amp;#39;a&amp;#39;) if n == 1 else print (&amp;#39;b&amp;#39;) と書ける。ワンライナーで書いたほうがすっきりする、可読性が高まるときに使う。 elif を使いたい場合</description>
    </item>
    
    <item>
      <title>test</title>
      <link>https://blog.mollinaca.dev/posts/19700101/test/</link>
      <pubDate>Thu, 01 Jan 1970 00:09:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/19700101/test/</guid>
      <description>test記事 テスト投稿記事 test記事 テスト記事更新テスト 画像貼り付け 1 &amp;lt;img src=my_icon.jpg&amp;gt; 2 [my_icon.jpg](my_icon.jpg) my_icon.jpg 3 {{&amp;lt; figure src=&amp;ldquo;my_icon.jpg&amp;rdquo; &amp;gt;}}</description>
    </item>
    
  </channel>
</rss>
