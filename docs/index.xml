<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mollinaca:/dev/random</title>
    <link>https://blog.mollinaca.dev/</link>
    <description>Recent content on mollinaca:/dev/random</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 27 Sep 2021 23:00:00 +0900</lastBuildDate><atom:link href="https://blog.mollinaca.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ABC220</title>
      <link>https://blog.mollinaca.dev/posts/20210927/abc220/</link>
      <pubDate>Mon, 27 Sep 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210927/abc220/</guid>
      <description>A - Find Multiple 問題: A - Find Multiple A以上B以下であるCの倍数を一つ出力する。 条件を満たすものがない場合は -1 を出力する。 A,B,C = map(int,input().split()) for x in range(A,B+1): if x%C == 0: print (x) exit () print (-1) いくつか解放を思いつくが、A問題だし単純に for ループを書いてしまうのが早いと思った。 B - Base K 問題: B -</description>
    </item>
    
    <item>
      <title>Nextcloud on raspberrypi</title>
      <link>https://blog.mollinaca.dev/posts/20210924/nextcloud_on_raspberrypi/</link>
      <pubDate>Fri, 24 Sep 2021 22:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210924/nextcloud_on_raspberrypi/</guid>
      <description>先日構築した Ubuntu on RaspberryPi4 に、 Nextcloud をインストールして、自宅用ファイルサーバとして利用する。 Nextcloud 公式ページは こちら いまどきの dropbox 風のUIのファイル共有サーバ。DBとWebサーバ(php)で稼働する。 アカウントや権限管理、ファイル共有なども今どきの操作感でで</description>
    </item>
    
    <item>
      <title>自宅用ローカルサーバ構築時のメモ</title>
      <link>https://blog.mollinaca.dev/posts/20210912/local_server/</link>
      <pubDate>Sun, 12 Sep 2021 22:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210912/local_server/</guid>
      <description>自宅用ローカルサーバ構築時のメモ 環境 H/W: Raspberry Pi 4 Model B Rev 1.4 OS: 20.04.3 LTS (Focal Fossa) 作業内容・手順 OS用意 RaspberryPi に刺す SSD カードに OS イメージを用意する。 RaspberryPi Imager を使う。 メジャーなOS は Imager の GUI 上で DL できる。今回はここから Ubuntu 20.04.3 LTS を選択する。 OS を選択し、SSD カードに書き込む。</description>
    </item>
    
    <item>
      <title>油断...</title>
      <link>https://blog.mollinaca.dev/posts/20210911/yudann/</link>
      <pubDate>Sat, 11 Sep 2021 10:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210911/yudann/</guid>
      <description>油断するとすぐサボる、、、ちゃんと書こうと思ったときに書こう 最近のメモ 技術系 アルゴリズムお勉強ネタ（あんま進んでない） slack app つくってる話、bolt試した話 ubuntu の cron での source コマンドが使えなかった話 雑記系 34インチモニタ買った</description>
    </item>
    
    <item>
      <title>Vaccine</title>
      <link>https://blog.mollinaca.dev/posts/20210814/vaccine/</link>
      <pubDate>Sat, 14 Aug 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210814/vaccine/</guid>
      <description>ワクチン2回目を接種してきた。 職域接種で、モデルナを2回。1回目は 7/14、2回目は本日 8/11。 1回目接種後 当日夜に37度代の発熱のみ。他に症状は特になし。 注射した腕の痛みはあり、腕をあげたり注射をした場所を押したりすると痛むが、それも1</description>
    </item>
    
    <item>
      <title>ABC212</title>
      <link>https://blog.mollinaca.dev/posts/20210731/abc212/</link>
      <pubDate>Sat, 31 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210731/abc212/</guid>
      <description>A - Alloy 問題: A - Alloy 整数AとBが入力される。 A == 0 なら &amp;ldquo;Sliver&amp;rdquo;, B == 0 なら &amp;ldquo;Gold&amp;rdquo;, それ以外なら &amp;ldquo;Alloy&amp;rdquo; を出力する。 A,B = map(int,input().split()) if 0 &amp;lt; A and 0 &amp;lt; B: print (&amp;#34;Alloy&amp;#34;) elif B == 0: print (&amp;#34;Gold&amp;#34;) elif A == 0: print (&amp;#34;Silver&amp;#34;) else: pass 問題文通り実装するだけ。最後の else:pass はいらないな。 B - Weak Password 問題: B - Weak Password 文字列として数字4桁が入力</description>
    </item>
    
    <item>
      <title>インターネット回線を切り替えた(2)</title>
      <link>https://blog.mollinaca.dev/posts/20210727/network_change2/</link>
      <pubDate>Tue, 27 Jul 2021 15:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210727/network_change2/</guid>
      <description>前回、6月中旬に家庭の都合でインターネット回線とISPを変更したが、すこぶる回線品質が悪化し耐え切れず1ヶ月でまた変更を行った。 幸いドコモ光を使っていると、組み合わせで使えるISPの変更は（特殊なオプション等を利用していなければ）ドコモ光の</description>
    </item>
    
    <item>
      <title>ベルマンフォード その1</title>
      <link>https://blog.mollinaca.dev/posts/20210725/bellmanford/</link>
      <pubDate>Sun, 25 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210725/bellmanford/</guid>
      <description>ベルマンフォードを実装する その(1) 概要 ベルマンフォードは、グラフアルゴリズムにおいて 任意の2点間の最短経路 を求めるアルゴリズムである。 以下の場合に利用ができる。 DAG(有効グラフかつ閉路をもたない)である 負のコストがあってもOK また、負の</description>
    </item>
    
    <item>
      <title>new blog!</title>
      <link>https://blog.mollinaca.dev/posts/20210716/newblog/</link>
      <pubDate>Fri, 16 Jul 2021 23:18:57 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210716/newblog/</guid>
      <description>新しいブログサイト作った ちょっと前に作った blogger + StackEdit が気に食わなかったので新しく作ってみた。 Hugo でページを作成し、GitHubにデプロイし、GitHub Pagesで公開する。カスタムドメイン＋HTTPSも設定。 しばらくこれでやってみよう。 hugo の使い</description>
    </item>
    
    <item>
      <title>DFS と BFS の例題を解く</title>
      <link>https://blog.mollinaca.dev/posts/20210709/dfs_bfs2/</link>
      <pubDate>Fri, 09 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210709/dfs_bfs2/</guid>
      <description>A - 深さ優先探索 次の問題を解く。A - 深さ優先探索 実装 H,W = map(int,input().split()) grid = [list(input()) for i in range(H)] # スタート地点を探す found = False for y,line in enumerate(grid): for x,p in enumerate(line): if p == &amp;#34;s&amp;#34;: start = (y,x) found = True break if found: break from collections import deque q = deque() q.append(start) direction = [[-1,0],[1,0],[0,-1],[0,1]] while q: p = q.pop() # DFS y = p[0] x = p[1] for d in direction: ny = y + d[0] nx = x + d[1] if 0 &amp;lt;= ny &amp;lt; H and 0 &amp;lt;= nx &amp;lt;</description>
    </item>
    
    <item>
      <title>DFS と BFS</title>
      <link>https://blog.mollinaca.dev/posts/20210707/dfs_bfs/</link>
      <pubDate>Wed, 07 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210707/dfs_bfs/</guid>
      <description>グラフを取得できたら、深さ優先探索（DFS）と幅優先探索（BFS）を実装してみる。 問題1 入力するグラフは以下。よくあるやつ。 これをテキスト情報で入力にすると以下のようになる。 7 6 1 2 1 3 2 4 2 5 3 6 3 7 このグラフに対して、1から出発して7に</description>
    </item>
    
    <item>
      <title>python でのグラフの取得方法(2)</title>
      <link>https://blog.mollinaca.dev/posts/20210706/graph2/</link>
      <pubDate>Tue, 06 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210706/graph2/</guid>
      <description>隣接辞書 これは自分のオリジナル（？）。 オリジナル、というほどのアイデアでもないだろうけど、当初自分がグラフの問題を初めてみて、どうやってこの情報を管理したらいいんだろ？で最初に考えたやりかた。以下のようにグラフ情報をdictで取得する。 この</description>
    </item>
    
    <item>
      <title>python でのグラフの取得方法</title>
      <link>https://blog.mollinaca.dev/posts/20210705/graph/</link>
      <pubDate>Mon, 05 Jul 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210705/graph/</guid>
      <description>python でグラフの入力を受け取る 昨日のABC208のD問題が解けなかったのが悔しかったので、ちゃんとグラフ問題の解き方を勉強する。具体的には、 今雰囲気でやってるグラフ情報の取得と扱いをちゃんと学習する DFS/BFS の復習 最短経路問題等、典型問題とアルゴリズム</description>
    </item>
    
    <item>
      <title>インターネット回線を切り替えた</title>
      <link>https://blog.mollinaca.dev/posts/20210619/network_change/</link>
      <pubDate>Sat, 19 Jun 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210619/network_change/</guid>
      <description>回線を切り替えた インターネットに接続する回線とISPを変更した。 変更理由は大したものではなくて、最近は家庭内ポイント利用をdポイントにまとめているため、回線もドコモ光に変更したらお得そう、というだけ。 現状に不満があったわけではないので、悪化</description>
    </item>
    
    <item>
      <title>WSL2 で Python &#43; Selenium &#43; ChromeDriver でスクレイピング</title>
      <link>https://blog.mollinaca.dev/posts/20210613/selenium/</link>
      <pubDate>Sun, 13 Jun 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210613/selenium/</guid>
      <description>準備 WSL2でpython3が利用できる状態 snap で chromium をインストール WSL2 で snapd を有効にする方法は以下を参考にした WSL2(Ubuntu 20.04)上でSnapdを動かす $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -yqq daemonize dbus-user-session fontconfig $ sudo daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target $ exec sudo nsenter -t $(pidof systemd) -a su - $LOGNAME インストールされた chromium のバージョン確認</description>
    </item>
    
    <item>
      <title>python の3項演算子に関するメモ</title>
      <link>https://blog.mollinaca.dev/posts/20210606/python_memo/</link>
      <pubDate>Sun, 06 Jun 2021 23:00:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/20210606/python_memo/</guid>
      <description>Python の3項演算子に関するメモ たまに使うけどこういうときどうすんだっけがわからなくて調べたのでメモしておく。 基本 if n == 1: print (&amp;#39;a&amp;#39;) else: print (&amp;#39;b&amp;#39;) は、 print (&amp;#39;a&amp;#39;) if n == 1 else print (&amp;#39;b&amp;#39;) と書ける。ワンライナーで書いたほうがすっきりする、可読性が高まるときに使う。 elif を使いたい場合</description>
    </item>
    
    <item>
      <title>test</title>
      <link>https://blog.mollinaca.dev/posts/19700101/test/</link>
      <pubDate>Thu, 01 Jan 1970 00:09:00 +0900</pubDate>
      
      <guid>https://blog.mollinaca.dev/posts/19700101/test/</guid>
      <description>test記事 テスト投稿記事 test記事 テスト記事更新テスト 画像貼り付け 1 &amp;lt;img src=my_icon.jpg&amp;gt; 2 [my_icon.jpg](my_icon.jpg) my_icon.jpg 3 {{&amp;lt; figure src=&amp;ldquo;my_icon.jpg&amp;rdquo; &amp;gt;}}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://blog.mollinaca.dev/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.mollinaca.dev/pages/about/</guid>
      <description>このブログについて このブログは私が自分のメモや雑記をつらつらと書く場所です。 私について 埼玉在住の30代でサーバインフラエンジニア@ゲーム企業。 サーバインフラ周りの技術、ITセキュリティ等に興味があります。 2020年9月に第一子を設けて202</description>
    </item>
    
  </channel>
</rss>
